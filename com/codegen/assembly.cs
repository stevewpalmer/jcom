// JCom Compiler Toolkit
// Main program constructor
//
// Authors:
//  Steve Palmer
//
// Copyright (C) 2013 Steve Palmer
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
// # http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

using System;
using System.Diagnostics;
using System.Diagnostics.SymbolStore;
using System.IO;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

namespace CCompiler {

    /// <summary>
    /// Constructs an object that enscapsulates the executable program
    /// generated by the code generator.
    /// </summary>
    public class AssemblyParseNode : ParseNode {

        private readonly bool _isCOMVisible = true;
        private readonly bool _isCLSCompliant = true;

        private AssemblyBuilder _ab;
        private ISymbolDocumentWriter _currentDoc;

        /// <summary>
        /// Return the assembly's module builder.
        /// </summary>
        public ModuleBuilder Builder { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this program is executable.
        /// An executable program has a Main method.
        /// </summary>
        /// <value><c>true</c> if this instance is executable; otherwise, <c>false</c>.</value>
        public bool IsExecutable { get; set; }

        /// <summary>
        /// Gets or sets the program name.
        /// </summary>
        /// <value>A string that specifies the program name</value>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the assembly version.
        /// </summary>
        /// <value>A string that specifies the assembly version</value>
        public string VersionString { get; set; }

        /// <summary>
        /// Gets or sets the output file name.
        /// </summary>
        /// <value>A string that specifies the output file name</value>
        public string OutputFile { get; set; }

        /// <summary>
        /// Specifies whether the assembly has debug information
        /// </summary>
        public bool GenerateDebug { get; set; }

        /// <summary>
        /// Dumps the contents of this parse node to the ParseNode XML
        /// output under the specified parent node.
        /// </summary>
        /// <param name="root">The parent XML node</param>
        public override void Dump(ParseNodeXml root) {
            ParseNodeXml blockNode = root.Node("Assembly");
            blockNode.Attribute("Name", Name);
            blockNode.Attribute("OutputFile", OutputFile);
            blockNode.Attribute("VersionString", VersionString);
            blockNode.Attribute("IsExecutable", IsExecutable.ToString());
            blockNode.Attribute("GenerateDebug", GenerateDebug.ToString());
        }

        /// <summary>
        /// Constructs a Program object with the given options and name. The name determines
        /// the module name and thus should be valid as per module name rules. The isExecutable
        /// flag specifies whether the program is directly executable and thus is an EXE file
        /// or is a library and thus is a DLL.
        /// </summary>
        /// <param name="opts">A set of options</param>
        /// <param name="name">String containing the program name</param>
        /// <param name="isExecutable">Specifies whether or not the program is directly executable</param>
        public override void Generate(ProgramParseNode cg) {

            AppDomain ad = AppDomain.CurrentDomain;
            AssemblyName an = new();

            // For .NET conventions, make the initial letter of the name
            // uppercase.
            string name = Name.CapitaliseString();

            an.Name = name;
            an.Version = new Version(VersionString);

            bool isSaveable = !string.IsNullOrEmpty(OutputFile);
            AssemblyBuilderAccess access = isSaveable ? AssemblyBuilderAccess.RunAndSave : AssemblyBuilderAccess.Run;
            _ab = ad.DefineDynamicAssembly(an, access);

            // Don't make the main class abstract if the program is being run from
            // memory as otherwise the caller will be unable to create an instance.
            if (isSaveable) {
                Builder = _ab.DefineDynamicModule(name, OutputFilename, GenerateDebug);
            } else {
                Builder = _ab.DefineDynamicModule(name, GenerateDebug);
            }

            // Make this assembly debuggable if the debug option was specified.
            if (GenerateDebug) {
                AddDebuggable();
            }
        }

        /// <summary>
        /// Sets the specified method as the program start method.
        /// </summary>
        /// <param name="method">Method object</param>
        public void SetEntryPoint(MethodInfo method) {
            _ab.SetEntryPoint(method);
        }

        /// <summary>
        /// Sets the current document.
        /// </summary>
        /// <param name="filename">Filename.</param>
        public void SetCurrentDocument(string filename) {
            if (GenerateDebug) {
                _currentDoc = Builder.DefineDocument(filename, Guid.Empty, Guid.Empty, Guid.Empty);
            }
        }

        /// <summary>
        /// Gets the current document.
        /// </summary>
        /// <returns>The current document.</returns>
        public ISymbolDocumentWriter GetCurrentDocument() {
            return _currentDoc;
        }

        /// <summary>
        /// Save the program code to the executable.
        /// </summary>
        public void Save() {
            AddCLSCompliant();
            AddCOMVisiblity();

            _ab.Save(OutputFilename);
        }

        /// <summary>
        /// Gets the output filename.
        /// </summary>
        /// <value>The output filename.</value>
        public string OutputFilename {
            get {
                string outputFilename = Path.GetFileName(OutputFile);
                if (!Path.HasExtension(outputFilename)) {
                    outputFilename = Path.ChangeExtension(outputFilename, IsExecutable ? "exe" : "dll");
                }
                return outputFilename;
            }
        }

        // Make this assembly fully debuggable.
        private void AddDebuggable() {
            Type type = typeof(DebuggableAttribute);
            ConstructorInfo ctor = type.GetConstructor(new [] { typeof(DebuggableAttribute.DebuggingModes) } );
            CustomAttributeBuilder caBuilder = new(ctor, new object[] { 
                                                        DebuggableAttribute.DebuggingModes.DisableOptimizations | 
                                                        DebuggableAttribute.DebuggingModes.Default });
            Builder.SetCustomAttribute(caBuilder);
        }

        // Mark this assembly as CLS Compliant.
        private void AddCLSCompliant() {
            Type type = typeof(CLSCompliantAttribute);
            ConstructorInfo ctor = type.GetConstructor(new [] { typeof(bool) } );
            CustomAttributeBuilder caBuilder = new(ctor, new object[] { _isCLSCompliant });
            Builder.SetCustomAttribute(caBuilder);
        }

        // Mark this assembly as COM Visible.
        private void AddCOMVisiblity() {
            Type type = typeof(ComVisibleAttribute);
            ConstructorInfo ctor = type.GetConstructor(new [] { typeof(bool) } );
            CustomAttributeBuilder caBuilder = new(ctor, new object[] { _isCOMVisible });
            Builder.SetCustomAttribute(caBuilder);
        }
    }
}